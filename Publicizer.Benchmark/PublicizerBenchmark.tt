<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Jobs;

namespace Publicizer.Benchmark;
<#
    var types = new []
    {
        "OriginalType",
        "ForcedProxy",
        "ForcedProxyWithCustomMemberAccessorType",
    };

    foreach (var type in types)
    {
#>

[SimpleJob(runtimeMoniker: RuntimeMoniker.Net48)]
[SimpleJob(runtimeMoniker: RuntimeMoniker.Net70)]
public class PublicizerBenchmark_<#= type #>
{
    private readonly <#= type #> Instance = new (<# if (type != "OriginalType") { #>new OriginalType()<# } #>);

    [Benchmark]
    public int FieldGet() => Instance.Field;

    [Benchmark]
    public void FieldSet()
    {
        Instance.Field = 5;
    }

    [Benchmark]
    public int ReadonlyFieldGet() => Instance.ReadonlyField;

<#
    if (type != "OriginalType")
    {
#>
    [Benchmark]
    public void ReadonlyFieldSet()
    {
        Instance.ReadonlyField = 5;
    }

<#
    }
#>
    [Benchmark]
    public OtherType ComplexFieldGet() => Instance.ComplexField;

    [Benchmark]
    public void ComplexFieldSet()
    {
        Instance.ComplexField = new OtherType(5);
    }

    [Benchmark]
    public int PropertyGet() => Instance.Property;

    [Benchmark]
    public void PropertySet()
    {
        Instance.Property = 5;
    }

    [Benchmark]
    public int ReadonlyPropertyGet() => Instance.ReadonlyProperty;

<#
    if (type != "OriginalType")
    {
#>
    [Benchmark]
    public void ReadonlyPropertySet()
    {
        Instance.ReadonlyProperty = 5;
    }

<#
    }
#>
    [Benchmark]
    public int StaticFieldGet() => <#= type #>.StaticField;

    [Benchmark]
    public void StaticFieldSet()
    {
        <#= type #>.StaticField = 5;
    }

    [Benchmark]
    public int StaticPropertyGet() => <#= type #>.StaticProperty;

    [Benchmark]
    public void StaticPropertySet()
    {
        <#= type #>.StaticProperty = 5;
    }

    [Benchmark]
    public void StaticProcedureInvocation()
    {
        <#= type #>.StaticProcedure();
    }

    [Benchmark]
    public void StaticProcedureInvocationWith16Parameters()
    {
        <#= type #>.StaticProcedureWith16Parameters(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
    }

    [Benchmark]
    public void StaticProcedureInvocationWith17Parameters()
    {
        <#= type #>.StaticProcedureWith17Parameters(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);
    }

    [Benchmark]
    public string StaticFunctionInvocation() => <#= type #>.StaticFunction();

    [Benchmark]
    public void StaticFunctionInvocationWith16Parameters() => <#= type #>.StaticFunctionWith16Parameters(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);

    [Benchmark]
    public void StaticFunctionInvocationWith17Parameters() => <#= type #>.StaticFunctionWith17Parameters(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);

    [Benchmark]
    public void ProcedureInvocation()
    {
        Instance.Procedure();
    }

    [Benchmark]
    public void ProcedureInvocationWith1Parameter()
    {
        Instance.Procedure(5);
    }

    [Benchmark]
    public void ProcedureInvocationWith2Parameters()
    {
        Instance.Procedure(5, new OtherType(8));
    }

    [Benchmark]
    public void ProcedureInvocationWith15Parameters()
    {
        Instance.ProcedureWith15Parameters(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
    }

    [Benchmark]
    public void ProcedureInvocationWith16Parameters()
    {
        Instance.ProcedureWith16Parameters(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
    }

    [Benchmark]
    public string FunctionInvocation() => Instance.Function();

    [Benchmark]
    public string FunctionInvocationWith1Parameter() => Instance.Function(5);

    [Benchmark]
    public string FunctionInvocationWith2Parameters() => Instance.Function(5, new OtherType(8));

    [Benchmark]
    public void FunctionInvocationWith15Parameters() => Instance.FunctionWith15Parameters(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);

    [Benchmark]
    public void FunctionInvocationWith16Parameters() => Instance.FunctionWith16Parameters(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
}
<#
    }
#>
